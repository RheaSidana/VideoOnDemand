// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "vod/model"

	mock "github.com/stretchr/testify/mock"
)

// RedisRepository is an autogenerated mock type for the RedisRepository type
type RedisRepository struct {
	mock.Mock
}

// UpdateInRedis provides a mock function with given fields: encodeToEncrypt
func (_m *RedisRepository) UpdateInRedis(encodeToEncrypt map[model.VideoLinks]model.VideoLinks) (bool, error) {
	ret := _m.Called(encodeToEncrypt)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(map[model.VideoLinks]model.VideoLinks) (bool, error)); ok {
		return rf(encodeToEncrypt)
	}
	if rf, ok := ret.Get(0).(func(map[model.VideoLinks]model.VideoLinks) bool); ok {
		r0 = rf(encodeToEncrypt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(map[model.VideoLinks]model.VideoLinks) error); ok {
		r1 = rf(encodeToEncrypt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRedisRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRedisRepository creates a new instance of RedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRedisRepository(t mockConstructorTestingTNewRedisRepository) *RedisRepository {
	mock := &RedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
