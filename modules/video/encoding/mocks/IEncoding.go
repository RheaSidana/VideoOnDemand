// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	model "vod/model"

	mock "github.com/stretchr/testify/mock"
)

// IEncoding is an autogenerated mock type for the IEncoding type
type IEncoding struct {
	mock.Mock
}

// Encode provides a mock function with given fields: inputVideoFile, inputFileLoc, videoData
func (_m *IEncoding) Encode(inputVideoFile string, inputFileLoc string, videoData model.VideoData) ([]string, error) {
	ret := _m.Called(inputVideoFile, inputFileLoc, videoData)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, model.VideoData) ([]string, error)); ok {
		return rf(inputVideoFile, inputFileLoc, videoData)
	}
	if rf, ok := ret.Get(0).(func(string, string, model.VideoData) []string); ok {
		r0 = rf(inputVideoFile, inputFileLoc, videoData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, model.VideoData) error); ok {
		r1 = rf(inputVideoFile, inputFileLoc, videoData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIEncoding interface {
	mock.TestingT
	Cleanup(func())
}

// NewIEncoding creates a new instance of IEncoding. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIEncoding(t mockConstructorTestingTNewIEncoding) *IEncoding {
	mock := &IEncoding{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
