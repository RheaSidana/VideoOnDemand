// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"

	model "vod/model"

	multipart "mime/multipart"
)

// IFunctionality is an autogenerated mock type for the IFunctionality type
type IFunctionality struct {
	mock.Mock
}

// GetVideoData provides a mock function with given fields: fileLoc
func (_m *IFunctionality) GetVideoData(fileLoc string) model.VideoData {
	ret := _m.Called(fileLoc)

	var r0 model.VideoData
	if rf, ok := ret.Get(0).(func(string) model.VideoData); ok {
		r0 = rf(fileLoc)
	} else {
		r0 = ret.Get(0).(model.VideoData)
	}

	return r0
}

// SaveOriginalVideo provides a mock function with given fields: c, videoFile
func (_m *IFunctionality) SaveOriginalVideo(c *gin.Context, videoFile *multipart.FileHeader) (string, error) {
	ret := _m.Called(c, videoFile)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, *multipart.FileHeader) (string, error)); ok {
		return rf(c, videoFile)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, *multipart.FileHeader) string); ok {
		r0 = rf(c, videoFile)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, *multipart.FileHeader) error); ok {
		r1 = rf(c, videoFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveVideoToLoc provides a mock function with given fields: inputFileLoc, data
func (_m *IFunctionality) SaveVideoToLoc(inputFileLoc string, data model.VideoData) (string, error) {
	ret := _m.Called(inputFileLoc, data)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, model.VideoData) (string, error)); ok {
		return rf(inputFileLoc, data)
	}
	if rf, ok := ret.Get(0).(func(string, model.VideoData) string); ok {
		r0 = rf(inputFileLoc, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, model.VideoData) error); ok {
		r1 = rf(inputFileLoc, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIFunctionality interface {
	mock.TestingT
	Cleanup(func())
}

// NewIFunctionality creates a new instance of IFunctionality. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIFunctionality(t mockConstructorTestingTNewIFunctionality) *IFunctionality {
	mock := &IFunctionality{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
