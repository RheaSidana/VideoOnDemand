// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"

	mock "github.com/stretchr/testify/mock"
)

// AuhorisationUtils is an autogenerated mock type for the AuhorisationUtils type
type AuhorisationUtils struct {
	mock.Mock
}

// BearerToken provides a mock function with given fields: token
func (_m *AuhorisationUtils) BearerToken(token string) []string {
	ret := _m.Called(token)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// IsEmpty provides a mock function with given fields: token
func (_m *AuhorisationUtils) IsEmpty(token string) bool {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsExpiredToken provides a mock function with given fields: exp
func (_m *AuhorisationUtils) IsExpiredToken(exp float64) bool {
	ret := _m.Called(exp)

	var r0 bool
	if rf, ok := ret.Get(0).(func(float64) bool); ok {
		r0 = rf(exp)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsNotBearerToken provides a mock function with given fields: token
func (_m *AuhorisationUtils) IsNotBearerToken(token string) bool {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TokenParse provides a mock function with given fields: token
func (_m *AuhorisationUtils) TokenParse(token string) (*jwt.Token, error) {
	ret := _m.Called(token)

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt.Token, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt.Token); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuhorisationUtils interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuhorisationUtils creates a new instance of AuhorisationUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuhorisationUtils(t mockConstructorTestingTNewAuhorisationUtils) *AuhorisationUtils {
	mock := &AuhorisationUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
